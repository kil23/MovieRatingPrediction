package code;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import com.constant.ServerConstants;
import com.database.ConnectionManager;
import com.helper.DBUtils;
import com.helper.StringHelper;

public class PearsonsCorrelation {
	public static void main(String[] args) {
	    double[] x = {1, 2, 4, 8};
	    double[] y = {2, 4, 8, 16};
	    double corr = new PearsonsCorrelation().correlation(y, x);

	    System.out.println(":"+corr);
				
	    double[][] d= new PearsonsCorrelation().getPiersonCoefficient2(3);
//	    new PearsonsCorrelation().getPiersonCoefficient(10);
//	    new PearsonsCorrelation().getPiersonCoefficient(11);
//	    new PearsonsCorrelation().getPiersonCoefficient(12);
	    System.out.println(d.length);
	    System.out.println("-----------------::-------------------------");
	    for(int i=0;i<d.length;i++){
	    	System.out.println("d["+i+"][0] = "+d[i][0]+" d["+i+"][1] = "+d[i][1]);
	    }
//	    System.out.println(new PearsonsCorrelation().getPiersonCoefficient2(1));
	}
	
	public ArrayList<String> getRatings(ArrayList<String> userArray){
		ArrayList<String> arr = new ArrayList<String>();
		
		return arr; 
	}
	
	public double[][] getPiersonCoefficient(int userId){
		ArrayList<String> usersArray = ConnectionManager.
				getDataArray("select N1.userid, N1.rating/A.total as rate, N1.genres " +
						"from (SELECT N.userid, N.genres, count(*) as rating FROM movie_history N group by N.userid,N.genres) N1" +
						" left join " +
						"(SELECT userid,count(*) as total FROM movie_history group by userid) A on N1.userid=A.userid");
		ArrayList<String> ratingsDB = ConnectionManager.
				getDataArray("select N1.rating/A.total as rate, N1.userid, N1.genres from " +
						"(SELECT N.userid,N.genres,count(*) as rating FROM movie_history N group by N.userid,N.genres) N1" +
						" left join " +
						"(SELECT userid,count(*) as total FROM movie_history group by userid) A on N1.uid=A.uid");
		ArrayList<double[]> ratings =new ArrayList<double[]>(); 
		for (int i = 0; i < ratingsDB.size(); i++) {
			double d[]=StringHelper.parseDouble( ratingsDB.get(i));
			ratings.add(d);
			System.out.print(d[0]+",");
		}
		System.out.println();
		int currentUserIndex=0;
		double[] currentUserRatings=null;
		for (int i = 0; i < usersArray.size(); i++) {
			if(usersArray.get(i).equalsIgnoreCase(userId+"")){
//				System.out.println("in");
				currentUserIndex=i;
				currentUserRatings=ratings.get(i);
				System.out.print(currentUserRatings[0]+",");
				//break;
			}
			else{
				break;
			}
			
		}
		
		double piersson[][]=new double[usersArray.size()][2];	// Piersson coeefficient for all other users	id=0 piersson id=1 users
		System.out.println("\n-----------------------------------------------------");
		System.out.println(userId+" | "+usersArray);
		for (int i = 0; i < ratings.size(); i++) {
			double d[]=ratings.get(i);
			piersson[i][0]=correlation(d, currentUserRatings);
			piersson[i][1]=StringHelper.n2i(usersArray.get(i));
//			users[i]=StringHelper.n2i(usersArray.get(i));
			System.out.print(""+piersson[i][0]+"-"+piersson[i][1]+", ");
		}
	System.out.println();
	System.out.println("-----------------------------------------------------");
		
		
		for (int i = 0; i < piersson.length; i++) {
			for (int j = i+1; j < piersson.length; j++) {
				if(piersson[i][0]<piersson[j][0]){
					double d=piersson[i][0];
					piersson[i][0]=piersson[j][0];
					piersson[j][0]=d;
					System.out.println(piersson[i][0]+" "+piersson[j][0]);
					d=piersson[i][1];
					piersson[i][1]=piersson[j][1];
					piersson[j][1]=d;
					System.out.println(piersson[i][1]+" "+piersson[j][1]);
				}
			}
		}
		
		for (int i = 0; i < piersson.length; i++) {
			if((piersson[i][0]<ServerConstants.PIERSSON_COEF)||(piersson[i][1]==userId)){
				piersson[i][0]=0;
				piersson[i][1]=0;
			}
		
		}
		
		return piersson;
		
	}
	
	public static double[][] getPiersonCoefficient2(int userId){
		HashMap hm = null, hm1=null;
		List list = ConnectionManager.
				getMapList("select N1.userid, N1.rating/A.total as rate, N1.genres from " +
						"(SELECT N.userid, N.genres, count(*) as rating FROM movie_history N group by N.userid,N.genres) N1" +
						" left join " +
						"(SELECT userid,count(*) as total FROM movie_history group by userid) A on N1.userid=A.userid");
		
		List totalUser = DBUtils.getMapList("select distinct userid from movie_history") ;
		System.out.println("Total User sise:"+totalUser.size());
		
		ArrayList<double[]> userrating = new ArrayList<double[]>();

		for(int j=0;j<totalUser.size();j++){
			hm1 = (HashMap) totalUser.get(j);
			String uid = StringHelper.n2s(hm1.get("userid"));
			double[] d=getrating(list, uid);
//			System.out.println(d);
			userrating.add(d);			
		}
		
		int currentUserIndex=0;
		double[] currentUserRatings=null;
		
		for(int j=0;j<totalUser.size();j++){
			hm = (HashMap) totalUser.get(j);
			int uid = StringHelper.n2i(hm.get("userid"));
			
			if(userId==uid){
				currentUserIndex=j;
				currentUserRatings=userrating.get(j);
//				System.out.print(currentUserRatings);
				break;
			}
		}
		
		double piersson[][]=new double[totalUser.size()][2];	// Piersson coeefficient for all other users	id=0 piersson id=1 users
		System.out.println("\n-----------------------------------------------------");
		System.out.println(userId+" | "+totalUser);
		for (int i = 0; i < userrating.size(); i++) {
			hm = (HashMap) totalUser.get(i);
			
			double d[]=userrating.get(i);
			piersson[i][0]=correlation(d, currentUserRatings);
			piersson[i][1]=StringHelper.n2i(hm.get("userid"));
//			users[i]=StringHelper.n2i(usersArray.get(i));
			System.out.print(""+piersson[i][0]+"-"+piersson[i][1]+", ");
		}
		
		System.out.println();
		System.out.println("-----------------------------------------------------");
		System.out.println(piersson.length);
			
			
		for (int i = 0; i < piersson.length; i++) {
			for (int j = i+1; j < piersson.length; j++) {
				if(piersson[i][0]<piersson[j][0]){
					double d=piersson[i][0];
					piersson[i][0]=piersson[j][0];
					piersson[j][0]=d;
					System.out.println(piersson[i][0]+" "+piersson[j][0]);
					d=piersson[i][1];
					piersson[i][1]=piersson[j][1];
					piersson[j][1]=d;
					System.out.println(piersson[i][1]+" "+piersson[j][1]);
				}
			}
		}
		
		for (int i = 0; i < piersson.length; i++) {
			if((piersson[i][0]<ServerConstants.PIERSSON_COEF)||(piersson[i][1]==userId)){
				piersson[i][0]=0;
				piersson[i][1]=0;
				System.out.println(piersson[i][0]+" "+piersson[i][1]);
			}			
		}			
		return piersson;
	}
	
	public static double[] getrating(List list, String uid){
		HashMap hm = null;
		String[] rating = new String[5];
		double[] drating = new double[5];
		for(int i=0;i<list.size();i++){
			hm = (HashMap) list.get(i);
			String category = StringHelper.n2s(hm.get("genres"));
			String uid1 = StringHelper.n2s(hm.get("userid"));
			
			if(uid.equalsIgnoreCase(uid1)){
				
//				if(category.equalsIgnoreCase("sport")){
//					rating[0] = StringHelper.n2s(hm.get("rate"));					
//				}
//				else if(category.equalsIgnoreCase("business")){
//					rating[1] = StringHelper.n2s(hm.get("rate"));
//				}
//				else if(category.equalsIgnoreCase("general")){
//					rating[2] = StringHelper.n2s(hm.get("rate"));
//				}
//				else if(category.equalsIgnoreCase("entertainment")){
//					rating[3] = StringHelper.n2s(hm.get("rate"));
//				}
//				else if(category.equalsIgnoreCase("politics")){
//					rating[4] = StringHelper.n2s(hm.get("rate"));
//				}
				
				if(category.contains("Action")){
					rating[0] = StringHelper.n2s(hm.get("rate"));					
				}
				else if(category.equalsIgnoreCase("Sci-Fi")){
					rating[1] = StringHelper.n2s(hm.get("rate"));
				}
				else if(category.equalsIgnoreCase("Drama")){
					rating[2] = StringHelper.n2s(hm.get("rate"));
				}
				else if(category.equalsIgnoreCase("Thriller")){
					rating[3] = StringHelper.n2s(hm.get("rate"));
				}
				else if(category.equalsIgnoreCase("Crime")){
					rating[4] = StringHelper.n2s(hm.get("rate"));
				}
			}
		}
		System.out.print("uid:"+uid+"-");
		for (int i = 0; i < drating.length; i++) {
			drating[i]=StringHelper.n2d(rating[i]);
			System.out.print(drating[i]+", ");
		}
		System.out.println();
//		System.out.println(rating);
		return drating;
	}
	
	public static double correlation(double[] xs, double[] ys) {
		// TODO: check here that arrays are not null, of the same length etc

		double sx = 0.0;
		double sy = 0.0;
		double sxx = 0.0;
		double syy = 0.0;
		double sxy = 0.0;

		int n = xs.length;

		for (int i = 0; i < n; ++i) {
			double x = xs[i];
			double y = ys[i];

			sx += x;
			sy += y;
			sxx += x * x;
			syy += y * y;
			sxy += x * y;
		}

		// covariation
		double cov = sxy / n - sx * sy / n / n;
		// standard error of x
		double sigmax = Math.sqrt(sxx / n - sx * sx / n / n);
		// standard error of y
		double sigmay = Math.sqrt(syy / n - sy * sy / n / n);

		// correlation is just a normalized covariation
		//System.out.println("\ncov / sigmax / sigmay="+cov / sigmax / sigmay);
		return cov / sigmax / sigmay;
	}
	
	
}
